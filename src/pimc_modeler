#!/usr/bin/python
# -*- coding: utf-8 -*-
# PIMC_PYLIB: the Python Library for Parametric Interval Markov Chains Verification
# Copyright (C) 2016 Ecole des Mines de Nantes
# Author: Anicet BART
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from samples.readers import *
from samples.dot_modeler import *
from samples.solution import *
from samples.milp_modeler import *
from samples.smt_modeler import *
from samples.smt_translater import *

import os
import sys
import argparse
import samples.utils

import signal
def sig_handler(signum, frame):
	print("segfault")
	utils.startPrintResourceUsage()
	

signal.signal(signal.SIGSEGV, sig_handler)

sys.setrecursionlimit(100000)
parser = argparse.ArgumentParser(
  description="PIMC_PYLIB Modeler [version 0.9]. Copyright (c) 2016 Ecole des Mines de Nantes",
  epilog="More details at https://github.com/anicet-bart/pimc_pylib", formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('-i', metavar='<pimc_file>', help='input file containing the pIMC', required=True)
parser.add_argument('-o', metavar='<output_file>', help='output file for printing the translation', required=True)

group = parser.add_mutually_exclusive_group()
group.add_argument("-r", action = "store_true", dest='useFractions', help="use rational numbers")
group.add_argument("-d", action = "store_false", dest='useFractions', help="use double/float numbers")

group = parser.add_mutually_exclusive_group(required=True)
group.add_argument("-smt", action = "store_true", help="Existential consistency with our modelling in SMT format", default=False)
group.add_argument("-milp", action = "store_true", help="Existential consistency with our modelling in MILP format", default=False)
group.add_argument("-vmcai16", action = "store_true", default=False, help="Existential consistency with VMCAI16 modelling in SMT format")

parser.add_argument('-semiCont', help='use semi-continuous variables', action="store_true", default=False)

#parser.add_argument("-dot", action = "store_true", help="perform .dot  double/float numbers", default=False)
#parser.add_argument('-sol', metavar='<labelling_file>', help='solution input file', default="")
args = parser.parse_args()

file = args.i
dotFile = False #args.dot
solFile = ""    #args.sol

# Loadding pIMC
utils.printTitle("Loading pIMC")
utils.printInfo("input_pimc", file)
utils.printInfo("input_numbers", "rationals" if args.useFractions else "float")
networkType, pimc2 = TxtFileReader.read(file, useFractions=args.useFractions)
infos = pimc2.getInfos()
infosOrder = ['#states','#transitions','initialState',
              '#intervals','#parameters','#paramInBounds',
              'ratioIntervals','ratioParamInBounds']
for key in infosOrder:
    utils.printInfo(key, infos[key])

# Modelling
utils.printTitle("Modelling")
utils.printInfo("output_format", "smt" if (args.vmcai16 or args.smt) else "milp")
utils.printInfo("output_numbers", "float")
utils.printInfo("output_model", args.o)

utils.startPrintResourceUsage()
if args.vmcai16:
    model = SmtTranslater.consistencyVMCAI16(pimc2, args.o)
elif args.smt:
    model = ModelerSMT.consistency(pimc2, args.o)
else:
    model = ModelerMILP.consistency(pimc2, args.semiCont, args.o)
utils.endPrintResourceUsage()

infos = model.getInfos()
infosOrder = ['#variables','#constraints',
              '#booleanVars','#continuousVars','#semiContinuousVars']
for key in infosOrder:
    utils.printInfo(key, infos[key])

utils.exit(0)

if solFile:
    solution = Solution.parse(solFile)
else:
    solution = None
DotModeler.export(pimc2, dotFile, solution)
